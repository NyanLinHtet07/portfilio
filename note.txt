"use client";
import {
  useMotionValueEvent,
  useScroll,
  useTransform,
  motion,
} from "framer-motion";
import React, { useEffect, useRef, useState } from "react";

interface TimelineEntry {
  title: string;
  content: React.ReactNode;
  position: string; // "left" or "right"
}

export const Timeline = ({ data }: { data: TimelineEntry[] }) => {
  const ref = useRef<HTMLDivElement>(null);
  const containerRef = useRef<HTMLDivElement>(null);
  const [height, setHeight] = useState(0);

  useEffect(() => {
    if (ref.current) {
      const rect = ref.current.getBoundingClientRect();
      setHeight(rect.height);
    }
  }, [ref]);

  const { scrollYProgress } = useScroll({
    target: containerRef,
    offset: ["start 10%", "end 50%"],
  });

  const heightTransform = useTransform(scrollYProgress, [0, 1], [0, height]);
  const opacityTransform = useTransform(scrollYProgress, [0, 0.1], [0, 1]);

  return (
    <div className="w-full bg-black text-white font-sans md:px-10" ref={containerRef}>
      <div className="max-w-7xl mx-auto py-20 px-4 md:px-8 lg:px-10">
        <h2 className="text-lg md:text-4xl mb-4 max-w-4xl">
          DISTINGUISHED PROFESSIONAL JOURNEY
        </h2>
      </div>

      <div ref={ref} className="relative w-full md:w-3/6 mx-auto pb-20 bg-black text-white">
        {data.map((item, index) => (
          <div key={index} className="relative flex w-full text-white pt-10 md:pt-40">
            {/* Content Box */}
            <div
              className={`absolute top-0 ${
                item.position === "left" ? "right-1/2 pr-10 text-right" : "left-1/2 pl-10 text-left"
              }`}
              style={{ width: "calc(50% - 20px)" }}
            >
              <h3 className="text-2xl md:text-4xl font-bold">{item.title}</h3>
              <div>{item.content}</div>
            </div>
          </div>
        ))}
        {/* Vertical Line */}
        <div
          style={{
            height: height + "px",
          }}
          className="absolute left-1/2 transform -translate-x-1/2 top-44 w-[2px] bg-gradient-to-b from-purple-500 via-blue-500 to-transparent"
        >
          <motion.div
            style={{
              height: heightTransform,
              opacity: opacityTransform,
            }}
            className="absolute inset-0 bg-gradient-to-b from-purple-500 via-blue-500 to-transparent rounded-full"
          />
        </div>
      </div>
    </div>
  );
};




        {/* <div className=" mt-32 ml-10">
                  <div className=" drop-shadow-lg bg-slate-300 backdrop-blur-md  py-3 px-4 h-96 w-80 rounded-xl text-slate-900 transition-opacity duration-500 flex flex-col">
                  <p className="text-2xl font-semibold mt-4 mb-5">{ edu.dip }</p>
                  
                  <div className=" flex flex-col justify-center items-start flex-grow font-semibold px-2">
                    <div className="flex flex-row  my-1">
                     <IconBuildingBank className="mr-2 "/>
                      <p>{edu.university}</p>
                    </div>
                    <div className="flex flex-row  my-1">
                      < IconClock className=" mr-2" />
                      <p>{edu.duration}</p>
                    </div>
                    {
                      edu.note && (
                        <div className="flex flex-row  my-1 ">
                          <IconAward className="mr-2"/>
                          <p>{edu.note}</p>
                        </div>
                      )}
                    </div>
                    <div className="flex my-2">
                      <Image onClick={() => open(edu.img)} src={edu.img} width={100} height={100} alt="certificate" className="rounded-md drop-shadow-md" />
                   
                    
                    </div>
                  </div>
                </div> */}




 {/* <Swiper
        effect={'cards'}
        grabCursor={true}
        modules={[EffectCards]}
        className="mySwiper"
        cardsEffect={{
          perSlideRotate: 20,
          perSlideOffset: 20,
          slideShadows:true
        }}
      >
        {
          eduList?.map((edu, index) => (
               <SwiperSlide key={index}>
                <div className="flex flex-col justify-between p-2 mb-1 rounded-r-xl border-r-4 border-slate-100 bg-slate-900 text-white h-72 w-48"
                    key={index}
                    onClick={() => openBook(edu)}>
                        <Image 
                          src="/education.png" 
                          alt="Book Cover" 
                          width={50} 
                          height={50} 
                          className="flex mx-auto mt-6" 
                        />
                        <p className="tracking-tight drop-shadow-xl -mt-10">
                          <span className="font-semibold italic font-serif text-xl">{edu.dip}</span> <br/>
                          <span className=" italic text-lg font-serif tracking-wider">{edu?.dipDetail}</span>  
                        </p>
                    
                        <div
                          className="w-full rounded-lg text-center mx-auto bg-slate-950 py-1 px-3 text-sm font-medium text-slate-100 focus:outline-none hover:text-black data-[hover]:bg-white/70 data-[focus]:outline-1 data-[focus]:outline-white"
                        >
              Detail
            </div>
            </div>
            </SwiperSlide>
          ))
        }
       
      </Swiper> */}

      {/* <Dialog open={isOpen} as="div" className="relative z-50 focus:outline-none " onClose={close}>
        <div className="fixed inset-0 z-10 w-screen overflow-y-auto">
          <div className="flex min-h-full items-center justify-center p-4">
            <DialogPanel
              transition
              className="w-full max-w-xl ring-2 ring-white rounded-xl bg-white/10  backdrop-blur-2xl duration-300 ease-out data-[closed]:transform-[scale(95%)] data-[closed]:opacity-0"
            >
            
              <Image src={item} width={800} height={600} alt={""} />
            
            </DialogPanel>
          </div>
        </div>
      </Dialog> */}